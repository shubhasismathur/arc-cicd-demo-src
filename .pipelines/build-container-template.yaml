parameters:
  - name: sourceLocation # source code directory path
    type: string
  - name: dockerFile # relative path to Dockerfile from sourceLocation
    type: string
  - name: containerReferences # space (' ') delimited set of files or folders in sourceLocation to check for changes
    type: string
    default: "."
  - name: acr # name of Azure Container Registry
    type: string
  - name: repository # name of container repository
    type: string
  - name: taskname # unique identifier for the task
    type: string
  - name: customArguments # custom arguments to acr az build
    type: string
    default: ""

steps:
  - task: AzureCLI@2
    name: "${{ parameters.taskname }}"
    displayName: Build and Push ${{ parameters.repository }}
    inputs:
      azureSubscription: $(AZURE_SUBSCRIPTION)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euxo pipefail  # Fail on error and print commands

        # Generate a tag with a reproducible checksum of all files in $containerReferences
        pushd "${{ parameters.sourceLocation }}" || exit 1
        if command -v git &> /dev/null; then
          imageTag=$(git log -n 1 --format="%H" -- ${{ parameters.containerReferences }} || echo "latest")
        else
          echo "Warning: git is not installed. Using 'latest' as the image tag."
          imageTag="latest"
        fi
        popd || exit 1

        # Check if the image with the generated tag already exists
        if ! az acr repository show -n "${{ parameters.acr }}" --image "${{ parameters.repository }}:$imageTag" --only-show-errors -o table; then
          echo "No match found. Container will be built."
          echo "Tag for new container: $imageTag"
          az acr build \
            -r "${{ parameters.acr }}" \
            -t "${{ parameters.repository }}:$imageTag" \
            -t "${{ parameters.repository }}:latest" \
            -f "${{ parameters.sourceLocation }}/${{ parameters.dockerFile }}" \
            ${{ parameters.customArguments }} \
            "${{ parameters.sourceLocation }}"
        else
          echo "The existing image with tag '$imageTag' is found."
        fi

        # Set IMAGE_TAG output variable
        echo "Setting IMAGE_TAG output for task ${{ parameters.taskname }}"
        echo "##vso[task.setvariable variable=IMAGE_TAG;isOutput=true]$imageTag"

        # Write the image tag to a file
        mkdir -p "$(Pipeline.Workspace)/image_tags"
        echo "$imageTag" > "$(Pipeline.Workspace)/image_tags/${{ parameters.taskname }}"
